/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorksRouteImport } from './routes/works'
import { Route as StackRouteImport } from './routes/stack'
import { Route as ShelfRouteImport } from './routes/shelf'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as LinksRouteImport } from './routes/links'
import { Route as BlogRouteImport } from './routes/blog'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminNewsletterSubsRouteImport } from './routes/admin/newsletter-subs'
import { Route as AdminImagesRouteImport } from './routes/admin/images'
import { Route as AdminBlogPostRouteImport } from './routes/admin/blog-post'

const WorksRoute = WorksRouteImport.update({
  id: '/works',
  path: '/works',
  getParentRoute: () => rootRouteImport,
} as any)
const StackRoute = StackRouteImport.update({
  id: '/stack',
  path: '/stack',
  getParentRoute: () => rootRouteImport,
} as any)
const ShelfRoute = ShelfRouteImport.update({
  id: '/shelf',
  path: '/shelf',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const LinksRoute = LinksRouteImport.update({
  id: '/links',
  path: '/links',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRoute = BlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminNewsletterSubsRoute = AdminNewsletterSubsRouteImport.update({
  id: '/admin/newsletter-subs',
  path: '/admin/newsletter-subs',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminImagesRoute = AdminImagesRouteImport.update({
  id: '/admin/images',
  path: '/admin/images',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminBlogPostRoute = AdminBlogPostRouteImport.update({
  id: '/admin/blog-post',
  path: '/admin/blog-post',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRoute
  '/links': typeof LinksRoute
  '/products': typeof ProductsRoute
  '/shelf': typeof ShelfRoute
  '/stack': typeof StackRoute
  '/works': typeof WorksRoute
  '/admin/blog-post': typeof AdminBlogPostRoute
  '/admin/images': typeof AdminImagesRoute
  '/admin/newsletter-subs': typeof AdminNewsletterSubsRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blog': typeof BlogRoute
  '/links': typeof LinksRoute
  '/products': typeof ProductsRoute
  '/shelf': typeof ShelfRoute
  '/stack': typeof StackRoute
  '/works': typeof WorksRoute
  '/admin/blog-post': typeof AdminBlogPostRoute
  '/admin/images': typeof AdminImagesRoute
  '/admin/newsletter-subs': typeof AdminNewsletterSubsRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blog': typeof BlogRoute
  '/links': typeof LinksRoute
  '/products': typeof ProductsRoute
  '/shelf': typeof ShelfRoute
  '/stack': typeof StackRoute
  '/works': typeof WorksRoute
  '/admin/blog-post': typeof AdminBlogPostRoute
  '/admin/images': typeof AdminImagesRoute
  '/admin/newsletter-subs': typeof AdminNewsletterSubsRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/links'
    | '/products'
    | '/shelf'
    | '/stack'
    | '/works'
    | '/admin/blog-post'
    | '/admin/images'
    | '/admin/newsletter-subs'
    | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blog'
    | '/links'
    | '/products'
    | '/shelf'
    | '/stack'
    | '/works'
    | '/admin/blog-post'
    | '/admin/images'
    | '/admin/newsletter-subs'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/links'
    | '/products'
    | '/shelf'
    | '/stack'
    | '/works'
    | '/admin/blog-post'
    | '/admin/images'
    | '/admin/newsletter-subs'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRoute: typeof BlogRoute
  LinksRoute: typeof LinksRoute
  ProductsRoute: typeof ProductsRoute
  ShelfRoute: typeof ShelfRoute
  StackRoute: typeof StackRoute
  WorksRoute: typeof WorksRoute
  AdminBlogPostRoute: typeof AdminBlogPostRoute
  AdminImagesRoute: typeof AdminImagesRoute
  AdminNewsletterSubsRoute: typeof AdminNewsletterSubsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/works': {
      id: '/works'
      path: '/works'
      fullPath: '/works'
      preLoaderRoute: typeof WorksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/stack': {
      id: '/stack'
      path: '/stack'
      fullPath: '/stack'
      preLoaderRoute: typeof StackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shelf': {
      id: '/shelf'
      path: '/shelf'
      fullPath: '/shelf'
      preLoaderRoute: typeof ShelfRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/links': {
      id: '/links'
      path: '/links'
      fullPath: '/links'
      preLoaderRoute: typeof LinksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/newsletter-subs': {
      id: '/admin/newsletter-subs'
      path: '/admin/newsletter-subs'
      fullPath: '/admin/newsletter-subs'
      preLoaderRoute: typeof AdminNewsletterSubsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/images': {
      id: '/admin/images'
      path: '/admin/images'
      fullPath: '/admin/images'
      preLoaderRoute: typeof AdminImagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/blog-post': {
      id: '/admin/blog-post'
      path: '/admin/blog-post'
      fullPath: '/admin/blog-post'
      preLoaderRoute: typeof AdminBlogPostRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRoute: BlogRoute,
  LinksRoute: LinksRoute,
  ProductsRoute: ProductsRoute,
  ShelfRoute: ShelfRoute,
  StackRoute: StackRoute,
  WorksRoute: WorksRoute,
  AdminBlogPostRoute: AdminBlogPostRoute,
  AdminImagesRoute: AdminImagesRoute,
  AdminNewsletterSubsRoute: AdminNewsletterSubsRoute,
  AdminIndexRoute: AdminIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
